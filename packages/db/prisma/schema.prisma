datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id             String   @id @default(uuid())
  phoneNumber    String   @unique
  email          String   @unique
     
  hashedpassword String
  
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

 
  wallet               Wallet?
  sentTransactions     Transaction[] @relation("SentTransactions")
  receivedTransactions Transaction[] @relation("ReceivedTransactions")
}

model Wallet {
  id        String   @id @default(uuid())
  userId    String   @unique
  balance   Int      @default(1000)
  currency  String   @default("INR")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  otp        String @default("")

  // Define the relation here with `fields` and `references`
  user         User          @relation(fields: [userId], references: [id])
  transactions Transaction[]
}
model Otp {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  otp       String   @db.VarChar(6)
  createdAt DateTime @default(now())
  expiresAt DateTime
}

model Transaction {
  id              String            @id @default(uuid())
  transactionType TransactionType
  senderId        String
  receiverId      String
  walletId        String 
  amount          Int 
  status          TransactionStatus
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt

  wallet Wallet @relation(fields: [walletId], references: [id]) // Correct relation

  sender   User @relation("SentTransactions", fields: [senderId], references: [id])
  receiver User @relation("ReceivedTransactions", fields: [receiverId], references: [id])

  // Relations to specific transaction types
  p2p     P2PTransaction?
  qr      QRTransaction?
  onRamp  OnRampTransaction?
  offRamp OffRampTransaction?
}

model P2PTransaction {
  id            String      @id @default(uuid())
  transactionId String      @unique
  note          String? // Optional field for P2P-specific notes
  Transaction   Transaction @relation(fields: [transactionId], references: [id])
}

model QRTransaction {
  id            String      @id @default(uuid())
  transactionId String      @unique
  qrCode        String
  Transaction   Transaction @relation(fields: [transactionId], references: [id])
}

model OnRampTransaction {
  id            String      @id @default(uuid())
  transactionId String      @unique
  bankAccount   String // Bank account details
  Transaction   Transaction @relation(fields: [transactionId], references: [id])
}

model OffRampTransaction {
  id            String      @id @default(uuid())
  transactionId String      @unique
  payoutDetails String // Withdrawal details
  Transaction   Transaction @relation(fields: [transactionId], references: [id])
}

enum TransactionType {
  P2P
  QR
  OnRamp
  OffRamp
}

enum TransactionStatus {
  Pending
  Successful
  Failed
}

enum AuthType {
  Google
  Github
}
